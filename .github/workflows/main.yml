name: Build
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  controller:
    runs-on: ubuntu-latest
    outputs:
      jobs: ${{ steps.calculate-jobs.outputs.jobs }}
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: 3
      - name:
        id: calculate-jobs
        shell: python
        run: |
          import json
          import os
          import sys
          
          COMMIT_INFO = json.loads("""${{ toJson(github.event.head_commit) }}""")
          COMMIT_MESSAGE = COMMIT_INFO["message"]
                
          AVAILABLE_JOBS = {
            "android",
            "linux_mingw_macos",
            "emscripten",
            "haiku",
            "ios",
            "loongarch64",
            "msvc",
            "n3ds",
            "ppc64le",
            "ps2",
            "psp",
            "riscos",
            "vita",
            "freebsd",
          }
          
          jobs = set()
          
          for line in COMMIT_MESSAGE.splitlines(): 
            line = line.lower()
            if line.strip().startswith("ci-run:"):
              command = line.removeprefix("ci-run:").strip()
              if command == "all":
                jobs.update(AVAILABLE_JOBS)
              else:
                if command in AVAILABLE_JOBS:
                  jobs.add(command)
                else:
                  print(f"Unknown {command=}", file=sys.stderr)
           
          if not jobs:
            jobs.update(AVAILABLE_JOBS)
          
          jobs_json = json.dumps({ job: True for job in jobs })
          print(f"jobs={jobs_json}")
          
          print(os.environ["GITHUB_OUTPUT"])
          print("before", open(os.environ["GITHUB_OUTPUT"]).read())
          with open(os.environ["GITHUB_OUTPUT"], "a") as f:
            print(f"jobs={jobs_json}", file=f)
          print("after", open(os.environ["GITHUB_OUTPUT"]).read())

  android:
    if: ${{ fromJSON(needs.controller.outputs.jobs).android }}
    name: ${{ matrix.platform.name }}
    needs: [controller]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: 'Android (Android.mk)'  }
          - { name: 'Android (CMake)', cmake: 1, android_abi: "arm64-v8a", android_platform: 23, arch: "aarch64", artifact: "SDL-android-arm64" }

    steps:
      - uses: actions/checkout@v3
      - uses: nttld/setup-ndk@v1
        id: setup_ndk
        with:
          ndk-version: r21e
      - name: Build (Android.mk)
        if: ${{ !matrix.platform.cmake }}
        run: |
          ./build-scripts/androidbuildlibs.sh
      - name: Setup (CMake)
        if: ${{ matrix.platform.cmake }}
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build pkg-config
      - name: Configure (CMake)
        if: ${{ matrix.platform.cmake }}
        run: |
          cmake -S . -B build \
            -Wdeprecated -Wdev -Werror \
            -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup_ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
            -DSDL_WERROR=ON \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DSDL_CLANG_TIDY=ON \
            -DANDROID_PLATFORM=${{ matrix.platform.android_platform }} \
            -DANDROID_ABI=${{ matrix.platform.android_abi }} \
            -DSDL_SHARED=ON \
            -DSDL_STATIC=ON \
            -DSDL_STATIC_PIC=ON \
            -DSDL_VENDOR_INFO="Github Workflow" \
            -DCMAKE_INSTALL_PREFIX=prefix \
            -DCMAKE_BUILD_TYPE=Release \
            -GNinja
      - name: Build (CMake)
        if: ${{ matrix.platform.cmake }}
        run: |
          cmake --build build --config Release --parallel --verbose
      - name: Install (CMake)
        if: ${{ matrix.platform.cmake }}
        run: |
          cmake --install build --config Release
          echo "SDL3_DIR=$(pwd)/prefix" >> $GITHUB_ENV
          ( cd prefix; find ) | LC_ALL=C sort -u
      - name: Package (CPack)
        if: ${{ matrix.platform.cmake }}
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        if: ${{ matrix.platform.cmake }}
        run: |
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${{ steps.setup_ndk.outputs.ndk-path }}/build/cmake/android.toolchain.cmake \
            -DANDROID_PLATFORM=${{ matrix.platform.android_platform }} \
            -DANDROID_ABI=${{ matrix.platform.android_abi }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }}
          cmake --build cmake_config_build --verbose
      - name: Verify sdl3.pc
        if: ${{ matrix.platform.cmake }}
        run: |
          export CC="${{ steps.setup_ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin/clang --target=${{ matrix.platform.arch }}-none-linux-androideabi${{ matrix.platform.android_platform }}"
          export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        if: ${{ matrix.platform.cmake }}
        with:
          if-no-files-found: error
          name: ${{ matrix.platform.artifact }}
          path: build/dist/SDL3*

  linux_mingw_macos:
    if: ${{ fromJSON(needs.controller.outputs.jobs).linux_mingw_macos }}
    name: ${{ matrix.platform.name }}
    needs: [controller]
    runs-on: ${{ matrix.platform.os }}

    defaults:
      run:
        shell: ${{ matrix.platform.shell }}

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: 'Windows (mingw32, msys2)',      os: windows-latest, shell: 'msys2 {0}', msystem: mingw32, msys-env: mingw-w64-i686, artifact: 'SDL-mingw32' }
          - { name: 'Windows (mingw64, msys2)',      os: windows-latest, shell: 'msys2 {0}', msystem: mingw64, msys-env: mingw-w64-x86_64, artifact: 'SDL-mingw64' }
          - { name: 'Windows (clang32, msys2)',      os: windows-latest, shell: 'msys2 {0}', msystem: clang32, msys-env: mingw-w64-clang-i686, artifact: 'SDL-msys2-clang32' }
          - { name: 'Windows (clang64, msys2)',      os: windows-latest, shell: 'msys2 {0}', msystem: clang64, msys-env: mingw-w64-clang-x86_64, artifact: 'SDL-msys2-clang64' }
          - { name: 'Windows (ucrt64, msys2)',       os: windows-latest, shell: 'msys2 {0}', msystem: ucrt64,  msys-env: mingw-w64-ucrt-x86_64, artifact: 'SDL-msys2-ucrt64' }
          - { name: 'Ubuntu 20.04',                  os: ubuntu-20.04,   shell: sh, artifact: 'SDL-ubuntu20.04' }
          - { name: 'Intel oneAPI (Ubuntu 20.04)',   os: ubuntu-20.04,   shell: bash, artifact: 'SDL-ubuntu20.04-oneapi', intel: true,
              source_cmd: 'source /opt/intel/oneapi/setvars.sh; export CC=icx; export CXX=icx;'}
          - { name: 'Intel Compiler (Ubuntu 20.04)', os: ubuntu-20.04,   shell: bash, artifact: 'SDL-ubuntu20.04-icc', intel: true, cmake: '-DSDL_CLANG_TIDY=OFF',
              source_cmd: 'source /opt/intel/oneapi/setvars.sh; export CC=icc; export CXX=icpc; export CFLAGS=-diag-disable=10441; export CXXFLAGS=-diag-disable=10441; '}
          - { name: 'Ubuntu 22.04',                  os: ubuntu-22.04,   shell: sh, artifact: 'SDL-ubuntu22.04' }
          - { name: 'MacOS (Framework)',             os: macos-latest,   shell: sh,    cmake: '-DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DSDL_FRAMEWORK=ON -DSDL_CLANG_TIDY=OFF', skip_test_pkgconfig: true, artifact: 'SDL-macos-framework' }
          - { name: 'MacOS (GNU prefix)',            os: macos-latest,   shell: sh,    cmake: '-DCMAKE_OSX_ARCHITECTURES="x86_64" -DCLANG_TIDY_BINARY="$(brew --prefix llvm)/bin/clang-tidy"', artifact: 'SDL-macos-gnu' }

    steps:
      - name: Set up MSYS2
        if: matrix.platform.shell == 'msys2 {0}'
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.platform.msystem }}
          install: >-
            ${{ matrix.platform.msys-env }}-cc
            ${{ matrix.platform.msys-env }}-cmake
            ${{ matrix.platform.msys-env }}-ninja
            ${{ matrix.platform.msys-env }}-pkg-config
            ${{ matrix.platform.msys-env }}-clang-tools-extra

      - name: Setup Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install build-essential git \
              pkg-config cmake ninja-build gnome-desktop-testing libasound2-dev libpulse-dev \
              libaudio-dev libjack-dev libsndio-dev libsamplerate0-dev libx11-dev libxext-dev \
              libxrandr-dev libxcursor-dev libxfixes-dev libxi-dev libxss-dev libwayland-dev \
              libxkbcommon-dev libdrm-dev libgbm-dev libgl1-mesa-dev libgles2-mesa-dev \
              libegl1-mesa-dev libdbus-1-dev libibus-1.0-dev libudev-dev fcitx-libs-dev

      - name: Setup extra Ubuntu 22.04 dependencies
        if: matrix.platform.os == 'ubuntu-22.04'
        run: |
          sudo apt-get install libpipewire-0.3-dev libdecor-0-dev

      - name: Setup Macos dependencies
        if: runner.os == 'macOS'
        run: |
          brew install \
            ninja \
            pkg-config \
            llvm

      - name: Setup Intel oneAPI
        if: matrix.platform.intel
        run: |
          # Setup oneAPI repo
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update -y
          
          # Install oneAPI
          sudo apt-get install -y intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic

      - uses: actions/checkout@v3
      - name: Check that versioning is consistent
        # We only need to run this once: arbitrarily use the Linux/CMake build
        if: "runner.os == 'Linux'"
        run: ./build-scripts/test-versioning.sh
      - name: Configure (CMake)
        run: |
          ${{ matrix.platform.source_cmd }}
          cmake -S . -B build -G Ninja \
            -Wdeprecated -Wdev -Werror \
            -DSDL_SHARED=ON \
            -DSDL_STATIC=ON \
            -DSDL_TESTS=ON \
            -DSDL_WERROR=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DSDL_VENDOR_INFO="Github Workflow" \
            -DSDL_CLANG_TIDY=ON \
            -DCMAKE_INSTALL_PREFIX=cmake_prefix \
            -DCMAKE_BUILD_TYPE=Release \
            ${{ matrix.platform.cmake }}
      - name: Build (CMake)
        run: |
          ${{ matrix.platform.source_cmd }}
          cmake --build build/ --config Release --verbose --parallel
      - name: Run build-time tests (CMake)
        run: |
          set -eu
          ${{ matrix.platform.source_cmd }}
          export SDL_TESTS_QUICK=1
          ctest -VV --test-dir build/
          if test "${{ runner.os }}" = "Linux"; then
            # This should show us the SDL_REVISION
            strings build/libSDL3.so.0 | grep SDL-
          fi
      - name: Install (CMake)
        run: |
          set -eu
          ${{ matrix.platform.source_cmd }}
          cmake --install build/ --config Release
          ( cd cmake_prefix; find . ) | LC_ALL=C sort -u
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          ${{ matrix.platform.source_cmd }}
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -DTEST_SHARED=ON \
            -DTEST_STATIC=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=$(echo "${{ github.workspace }}/cmake_prefix" | sed  -e 's#\\#/#g')
          cmake --build cmake_config_build --verbose
      - name: Verify sdl3.pc
        if: ${{ !matrix.platform.skip_test_pkgconfig }}
        run: |
          ${{ matrix.platform.source_cmd }}
          export PKG_CONFIG_PATH=$(echo "${{ github.workspace }}/cmake_prefix/lib/pkgconfig" | sed  -e 's#\\#/#g')
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ matrix.platform.artifact }}
          path: build/dist/SDL3*

  emscripten:
    if: ${{ fromJSON(needs.controller.outputs.jobs).emscripten }}
    name: 'Emscripten'
    runs-on: ubuntu-latest
    needs: [controller]
    steps:
      - uses: actions/checkout@v3
      - uses: mymindstorm/setup-emsdk@v10
        with:
          version: 2.0.32
      - name: Install ninja
        run: |
          sudo apt-get -y update
          sudo apt-get install -y ninja-build
      - name: Configure (CMake)
        run: |
          emcmake cmake -S . -B build \
            -Wdeprecated -Wdev -Werror \
            -DSDL_WERROR=ON \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=prefix \
            -GNinja
      - name: Build (CMake)
        run: cmake --build build/ --verbose
      - name: Run build-time tests
        run: |
          set -eu
          export SDL_TESTS_QUICK=1
          # FIXME: enable Emscripten build time tests
          # ctest -VV --test-dir build/
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=$(pwd)/prefix" >> $GITHUB_ENV
          cmake --install build/
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          emcmake cmake -S cmake/test -B cmake_config_build \
            -DCMAKE_BUILD_TYPE=Release \
            -DSDL_VENDOR_INFO="Github Workflow" \
            -DTEST_SHARED=FALSE \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }}
          cmake --build cmake_config_build --verbose
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-emscripten
          path: build/dist/SDL3*

  haiku:
    if: ${{ fromJSON(needs.controller.outputs.jobs).haiku }}
    runs-on: ubuntu-latest
    needs: [controller]
    name: Haiku
    container: haiku/cross-compiler:x86_64-r1beta4
    steps:
      - uses: actions/checkout@v3
      - name: Setup dependencies
        run: |
          apt-get install pkg-config -y
      - name: Configure Haiku environment variables
        run: |
          echo "CC=x86_64-unknown-haiku-gcc" >> $GITHUB_ENV
          echo "CXX=x86_64-unknown-haiku-g++" >> $GITHUB_ENV
      - name: Configure (CMake)
        run: |
          cmake -S . -B build -GNinja \
            -Wdeprecated -Wdev -Werror \
            -DSDL_SHARED=ON \
            -DSDL_STATIC=ON \
            -DSDL_TESTS=ON \
            -DSDL_WERROR=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DSDL_VENDOR_INFO=Github_Workflow \
            -DCMAKE_INSTALL_PREFIX=cmake_prefix \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_SYSTEM_NAME=Haiku
      - name: Build (CMake)
        run: |
          cmake --build build/ --config Release --verbose --parallel
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=$(pwd)/cmake_prefix" >> $GITHUB_ENV
          cmake --install build/ --config Release
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} \
            -DCMAKE_SYSTEM_NAME=Haiku
          cmake --build ./cmake_config_build --verbose
      - name: Verify sdl3.pc
        run: |
          export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-haiku
          path: build/dist/SDL3*

  ios:
    if: ${{ fromJSON(needs.controller.outputs.jobs).ios }}
    name: ${{ matrix.platform.name }}
    needs: [controller]
    runs-on: macos-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: iOS, target: Static Library-iOS, sdk: iphoneos }
          - { name: tvOS, target: Static Library-tvOS, sdk: appletvos }

    steps:
      - uses: actions/checkout@v3
      - name: Build
        run: xcodebuild -project Xcode/SDL/SDL.xcodeproj -target '${{ matrix.platform.target }}' -configuration Release -sdk ${{ matrix.platform.sdk }} clean build

  loongarch64:
    if: ${{ fromJSON(needs.controller.outputs.jobs).loongarch64 }}
    name: LoongArch64
    needs: [controller]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { toolchain-version: 2022.09.06 }
    steps:
      - uses: actions/checkout@v3
      - name: Install build requirements
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends cmake ninja-build pkg-config tar wget

      - uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: /opt/cross-tools
          key: loongarch64-${{ matrix.platform.toolchain-version }}

      - name: Download LoongArch64 gcc+glibc toolchain
        if: ${{ !steps.restore-cache.outputs.cache-hit }}
        run: |
          url="https://github.com/loongson/build-tools/releases/download/${{ matrix.platform.toolchain-version }}/loongarch64-clfs-6.3-cross-tools-gcc-glibc.tar.xz"

          wget "$url" -O /tmp/toolchain.tar.xz

          mkdir -p /opt
          tar -C /opt -x -f /tmp/toolchain.tar.xz

      - uses: actions/cache/save@v3
        if: ${{ !steps.restore-cache.outputs.cache-hit }}
        with:
          path: /opt/cross-tools
          key: loongarch64-${{ matrix.platform.toolchain-version }}

      - name: Set-up Loongarch64 build environment
        run: |
          echo "/opt/cross-tools/bin" >> $GITHUB_PATH
          echo "CC=loongarch64-unknown-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX=loongarch64-unknown-linux-gnu-g++" >> $GITHUB_ENV

      - name: Configure (CMake)
        run: |
          cmake -S . -B build -G Ninja \
            -Wdeprecated -Wdev -Werror \
            -DSDL_SHARED=ON \
            -DSDL_STATIC=ON \
            -DSDL_TESTS=ON \
            -DSDL_WERROR=ON \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DSDL_VENDOR_INFO="Github Workflow" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=prefix
      - name: Build (CMake)
        run: |
          cmake --build build --verbose
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=$(pwd)/prefix" >> $GITHUB_ENV
          cmake --install build/
          ( cd prefix; find ) | LC_ALL=C sort -u
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -DTEST_SHARED=TRUE \
            -DTEST_STATIC=TRUE \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build cmake_config_build --verbose
      - name: Verify sdl3.pc
        run: |
          export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-loongarch64
          path: build/dist/SDL3*

  msvc:
    if: ${{ fromJSON(needs.controller.outputs.jobs).msvc }}
    name: ${{ matrix.platform.name }}
    needs: [controller]
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: Windows (x64),          flags: -A x64,   project: VisualC/SDL.sln, projectflags: '/p:Platform=x64', artifact: 'SDL-VC-x64' }
          - { name: Windows (x86),          flags: -A Win32, project: VisualC/SDL.sln, projectflags: '/p:Platform=Win32', artifact: 'SDL-VC-x86' }
          - { name: Windows static VCRT (x64), flags: -A x64 -DSDL_FORCE_STATIC_VCRT=ON, artifact: 'SDL-VC-static-VCRT-x64' }
          - { name: Windows static VCRT (x86), flags: -A Win32 -DSDL_FORCE_STATIC_VCRT=ON, artifact: 'SDL-VC-static-VCRT-x86' }
          - { name: Windows (clang-cl x64), flags: -T ClangCL -A x64, artifact: 'SDL-clang-cl-x64' }
          - { name: Windows (clang-cl x86), flags: -T ClangCL -A Win32, artifact: 'SDL-clang-cl-x86' }
          - { name: Windows (ARM),          flags: -A ARM, artifact: 'SDL-VC-arm32' }
          - { name: Windows (ARM64),        flags: -A ARM64, artifact: 'SDL-VC-arm64' }
          - { name: UWP (x64),              flags: -A x64 -DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0" -DSDL_TESTS=OFF, nowerror: true,
              project: VisualC-WinRT/SDL-UWP.sln, projectflags: '/p:Platform=x64 /p:WindowsTargetPlatformVersion=10.0.17763.0', artifact: 'SDL-VC-UWP' }

    steps:
      - uses: actions/checkout@v3
      - name: Create CMake project using SDL as a subproject
        shell: python
        run: |
          import os
          import textwrap
          srcdir = r"${{ github.workspace }}".replace("\\", "/")
          builddir = f"{ srcdir }/build"
          os.makedirs(builddir)
          with open(f"{ builddir }/CMakeLists.txt", "w") as f:
            f.write(textwrap.dedent(f"""\
              cmake_minimum_required(VERSION 3.0)
              project(sdl_user)
              add_subdirectory("{ srcdir }" SDL)
            """))
      - name: Configure (CMake)
        run: cmake -S build -B build `
          -Wdeprecated -Wdev -Werror `
          -DSDL_WERROR=${{ !matrix.platform.nowerror }} `
          -DSDL_SHARED=ON `
          -DSDL_STATIC=ON `
          -DSDL_TESTS=ON `
          -DSDL_INSTALL_TESTS=ON `
          -DSDL_VENDOR_INFO="Github Workflow" `
          -DSDL_DISABLE_INSTALL=OFF `
          -DSDL_DISABLE_INSTALL_CPACK=OFF `
          ${{ matrix.platform.flags }} `
          -DCMAKE_INSTALL_PREFIX=prefix
      - name: Build (CMake)
        run: cmake --build build/ --config Release --parallel
      - name: Run build-time tests
        if: "! contains(matrix.platform.name, 'ARM')"
        run: |
          $env:SDL_TESTS_QUICK=1
          ctest -VV --test-dir build/ -C Release
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=$Env:GITHUB_WORKSPACE/prefix" >> $Env:GITHUB_ENV
          cmake --install build/
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target PACKAGE
      - name: Verify CMake configuration files
        if: ${{ !contains(matrix.platform.name, 'UWP') }}  # FIXME: cmake/test/CMakeLists.txt should support UWP
        run: |
          cmake -S cmake/test -B cmake_config_build `
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} `
            ${{ matrix.platform.flags }}
          cmake --build cmake_config_build --config Release

      - name: Add msbuild to PATH
        if: ${{ matrix.platform.project != '' }}
        uses: microsoft/setup-msbuild@v1.1.3
      - name: Build msbuild
        if: ${{ matrix.platform.project != '' }}
        run: msbuild ${{ matrix.platform.project }} /m /p:BuildInParallel=true /p:Configuration=Release ${{ matrix.platform.projectflags }}
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ matrix.platform.artifact }}
          path: build/dist/SDL3*

  n3ds:
    if: ${{ fromJSON(needs.controller.outputs.jobs).n3ds }}
    name: Nintendo 3DS
    runs-on: ubuntu-latest
    needs: [controller]
    container:
      image: devkitpro/devkitarm:latest
    steps:
      - uses: actions/checkout@v3
      - name: Install build requirements
        run: |
          apt update
          apt install ninja-build
      - name: Configure (CMake)
        run: |
          cmake -S . -B build -G Ninja \
            -Wdeprecated -Wdev -Werror \
            -DCMAKE_TOOLCHAIN_FILE=${DEVKITPRO}/cmake/3DS.cmake \
            -DSDL_WERROR=ON \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DSDL_VENDOR_INFO="Github Workflow" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=prefix
      - name: Build (CMake)
        run: |
          cmake --build build --verbose
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=$(pwd)/prefix" >> $GITHUB_ENV
          cmake --install build/
          ( cd prefix; find ) | LC_ALL=C sort -u
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${DEVKITPRO}/cmake/3DS.cmake \
            -DTEST_SHARED=FALSE \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build cmake_config_build --verbose
      - name: Extract CC/CXX/CFLAGS/CXXFLAGS from CMake toolchain
        run: |
          cmake -S .github/cmake -B /tmp/cmake_extract \
            -DCMAKE_TOOLCHAIN_FILE=${DEVKITPRO}/cmake/3DS.cmake \
            -DCMAKE_BUILD_TYPE=Release \
            -DVAR_PATH=/tmp/n3ds_env.txt
          cat /tmp/n3ds_env.txt >> $GITHUB_ENV
      - name: Verify sdl3.pc
        run: |
          export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-n3ds
          path: build/dist/SDL3*

  ppc64le:
    if: ${{ fromJSON(needs.controller.outputs.jobs).ppc64le }}
    name: PowerPC64LE
    runs-on: ubuntu-latest
    needs: [controller]
    container:
      image: dockcross/linux-ppc64le:latest
    steps:
      - uses: actions/checkout@v3
      - name: Install build requirements
        run: |
          apt-get update -y
          apt-get install -y cmake ninja-build
      - name: Configure (CMake)
        run: |
          # FIXME: Enable SDL_WERROR
          cmake -S . -B build -G Ninja \
            -Wdeprecated -Wdev -Werror \
            -DSDL_SHARED=ON \
            -DSDL_STATIC=ON \
            -DSDL_TESTS=ON \
            -DSDL_WERROR=OFF \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DSDL_VENDOR_INFO="Github Workflow" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=prefix
      - name: Build (CMake)
        run: |
          cmake --build build --verbose
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=$(pwd)/prefix" >> $GITHUB_ENV
          cmake --install build/
          ( cd prefix; find ) | LC_ALL=C sort -u
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -DTEST_SHARED=TRUE \
            -DTEST_STATIC=TRUE \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build cmake_config_build --verbose
      - name: Verify sdl3.pc
        run: |
          export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-ppc64le
          path: build/dist/SDL3*

  ps2:
    if: ${{ fromJSON(needs.controller.outputs.jobs).ps2 }}
    name: PlayStation 2
    runs-on: ubuntu-latest
    needs: [controller]
    container: ps2dev/ps2dev:latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup dependencies
        run: |
          apk update
          apk add cmake gmp mpc1 mpfr4 ninja pkgconf make git

      # To be removed once ps2_drivers is part of PS2DEV
      - name: Install ps2_drivers lib
        run: |
          git clone https://github.com/fjtrujy/ps2_drivers.git
          cd ps2_drivers
          make -j $(getconf _NPROCESSORS_ONLN) clean
          make -j $(getconf _NPROCESSORS_ONLN)
          make -j $(getconf _NPROCESSORS_ONLN) install

      - name: Configure (CMake)
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=$PS2DEV/ps2sdk/ps2dev.cmake \
            -DSDL_WERROR=ON \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DCMAKE_INSTALL_PREFIX=cmake_prefix \
            -DCMAKE_BUILD_TYPE=Release
      - name: Build (CMake)
        run: cmake --build build --config Release --verbose -- -j 1
      - name: Install (CMake)
        run: |
          set -eu
          cmake --install build/ --config Release
          echo "SDL3_DIR=$(pwd)/cmake_prefix" >> $GITHUB_ENV
          ( cd cmake_prefix; find ) | LC_ALL=C sort -u
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package -- -j 1

      - name: Verify CMake configuration files
        run: |
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -Wdeprecated -Wdev -Werror \
            -DCMAKE_TOOLCHAIN_FILE=$PS2DEV/ps2sdk/ps2dev.cmake \
            -DTEST_SHARED=FALSE \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build cmake_config_build --verbose -- -j 1
      - name: Verify sdl3.pc
        run: |
          export CC=mips64r5900el-ps2-elf-gcc
          export LDFLAGS="-L$PS2DEV/ps2sdk/ee/lib -L$PS2DEV/gsKit/lib -L$PS2DEV/ps2sdk/ports/lib"
          export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-ps2
          path: build/dist/SDL3*

  psp:
    if: ${{ fromJSON(needs.controller.outputs.jobs).psp }}
    name: PlayStation Portable
    runs-on: ubuntu-latest
    needs: [controller]
    container: pspdev/pspdev:latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup dependencies
        run: |
          apk update
          apk add cmake gmp mpc1 mpfr4 make pkgconf
      - name: Patch the pspdev toolchain to use -isystem instead of -I
        run: |
          # https://github.com/pspdev/pspsdk/issues/123
          sed -E s/-I/-isystem/g -i $PSPDEV/psp/share/pspdev.cmake
      - name: Configure (CMake)
        run: |
          cmake -S . -B build \
            -Wdeprecated -Wdev -Werror \
            -DCMAKE_TOOLCHAIN_FILE=$PSPDEV/psp/share/pspdev.cmake \
            -DSDL_WERROR=ON \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=prefix
      - name: Build (CMake)
        run: cmake --build build --config Release --verbose
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=$(pwd)/prefix" >> $GITHUB_ENV
          cmake --install build --config Release
          ( cd prefix; find ) | LC_ALL=C sort -u
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          cmake -S cmake/test -B cmake_config_build \
            -DCMAKE_TOOLCHAIN_FILE=$PSPDEV/psp/share/pspdev.cmake \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} \
            -DTEST_SHARED=FALSE \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build cmake_config_build --verbose
      - name: Verify sdl3.pc
        run: |
          export CC=psp-gcc
          export LDFLAGS="-L$PSPDEV/lib -L$PSPDEV/psp/lib -L$PSPDEV/psp/sdk/lib"
          export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-psp
          path: build/dist/SDL3*

  riscos:
    if: ${{ fromJSON(needs.controller.outputs.jobs).riscos }}
    name: RiscOS
    needs: [controller]
    runs-on: ubuntu-latest
    container: riscosdotinfo/riscos-gccsdk-4.7:latest

    steps:
      - name: Setup dependencies
        run: apt-get update && apt-get install -y cmake ninja-build
      - uses: actions/checkout@v3
      - name: Configure (CMake)
        run: |
          cmake -S . -B build -G Ninja \
            -Wdeprecated -Wdev -Werror \
            -DCMAKE_TOOLCHAIN_FILE=/home/riscos/env/toolchain-riscos.cmake \
            -DRISCOS:BOOL=ON \
            -DSDL_GCC_ATOMICS=OFF \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DSDL_VENDOR_INFO="Github Workflow" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/prefix_cmake
      - name: Build (CMake)
        run: cmake --build build --verbose
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=${{ github.workspace }}/prefix_cmake" >> $GITHUB_ENV
          cmake --install build/
          ( cd ${{ github.workspace }}/prefix_cmake; find ) | LC_ALL=C sort -u
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -DTEST_SHARED=OFF \
            -DCMAKE_TOOLCHAIN_FILE=/home/riscos/env/toolchain-riscos.cmake \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} \
            -DCMAKE_BUILD_TYPE=Release \
            ${{ matrix.platform.test_args }}
          cmake --build cmake_config_build --verbose
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-riscos
          path: build/dist/SDL3*

  vita:
    if: ${{ fromJSON(needs.controller.outputs.jobs).vita }}
    name: ${{ matrix.platform.name }}
    needs: [controller]
    runs-on: ubuntu-latest
    container:
      image: vitasdk/vitasdk:latest
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: PlayStation Vita (GLES w/ pib),                  pib: true, version: 1.1.4, artifact: SDL-vita-pib }
          - { name: PlayStation Vita (GLES w/ PVR_PSP2 + gles4vita), pvr: true, version: 3.9,   artifact: SDL-vita-pvr }

    steps:
      - uses: actions/checkout@v3
      - name: Install build requirements
        run: |
          apk update
          apk add cmake ninja pkgconf bash tar

      - uses: actions/cache/restore@v3
        id: restore-cache
        with:
          path: /vita/dependencies
          key: ${{ matrix.platform.artifact }}-${{ matrix.platform.version }}

      - name: Download PVR_PSP2 (GLES)
        if: ${{ !!matrix.platform.pvr && !steps.restore-cache.outputs.cache-hit }}
        run: |
          pvr_psp2_version=${{ matrix.platform.version }}
          
          mkdir -p /vita/dependencies/include
          mkdir -p /vita/dependencies/lib
          
          # Configure PVR_PSP2 headers
          wget https://github.com/GrapheneCt/PVR_PSP2/archive/refs/tags/v$pvr_psp2_version.zip -P/tmp
          unzip /tmp/v$pvr_psp2_version.zip -d/tmp
          cp -r /tmp/PVR_PSP2-$pvr_psp2_version/include/* /vita/dependencies/include
          rm /tmp/v$pvr_psp2_version.zip
          
          # include guard of PVR_PSP2's khrplatform.h does not match the usual one
          sed -i -e s/__drvkhrplatform_h_/__khrplatform_h_/ /vita/dependencies/include/KHR/khrplatform.h
          
          # Configure PVR_PSP2 stub libraries
          wget https://github.com/GrapheneCt/PVR_PSP2/releases/download/v$pvr_psp2_version/vitasdk_stubs.zip -P/tmp
          unzip /tmp/vitasdk_stubs.zip -d/tmp/pvr_psp2_stubs
          find /tmp/pvr_psp2_stubs -type f -name "*.a" -exec cp {} /vita/dependencies/lib \;
          rm /tmp/vitasdk_stubs.zip
          rm -rf /tmp/pvr_psp2_stubs

      - name: Download gl4es4vita (OpenGL)
        if: ${{ !!matrix.platform.pib && !steps.restore-cache.outputs.cache-hit }}
        run: |
          gl4es4vita_version=${{ matrix.platform.version }}
          
          mkdir -p /vita/dependencies/include
          mkdir -p /vita/dependencies/lib
          
          # Configure gl4es4vita headers
          wget https://github.com/SonicMastr/gl4es4vita/releases/download/v$gl4es4vita_version-vita/include.zip -P/tmp
          unzip -o /tmp/include.zip -d/vita/dependencies/include
          rm /tmp/include.zip
          
          # Configure gl4es4vita stub libraries
          wget https://github.com/SonicMastr/gl4es4vita/releases/download/v$gl4es4vita_version-vita/vitasdk_stubs.zip -P/tmp
          unzip /tmp/vitasdk_stubs.zip -d/vita/dependencies/lib

      - uses: actions/cache/save@v3
        if: ${{ !steps.restore-cache.outputs.cache-hit }}
        with:
          path: /vita/dependencies
          key: ${{ matrix.platform.artifact }}-${{ matrix.platform.version }}

      - name: Copy PVR_PSP2 (GLES) or gl4es4vita (OpenGL) to vita toolchain dir
        run: |
          cp -rv /vita/dependencies/* ${VITASDK}/arm-vita-eabi

      - name: Configure (CMake)
        run: |
          cmake -S . -B build -G Ninja \
            -Wdeprecated -Wdev -Werror \
            -DCMAKE_TOOLCHAIN_FILE=${VITASDK}/share/vita.toolchain.cmake \
            -DVIDEO_VITA_PIB=${{ !!matrix.platform.pib }} \
            -DVIDEO_VITA_PVR=${{ !!matrix.platform.pvr }} \
            -DSDL_ARMNEON=ON \
            -DSDL_ARMSIMD=ON \
            -DSDL_WERROR=ON \
            -DSDL_TESTS=ON \
            -DSDL_INSTALL_TESTS=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_PREFIX=prefix
      - name: Build (CMake)
        run: cmake --build build --verbose
      - name: Install (CMake)
        run: |
          echo "SDL3_DIR=$(pwd)/prefix" >> $GITHUB_ENV
          cmake --install build/
          ( cd prefix; find ) | LC_ALL=C sort -u
      - name: Package (CPack)
        run: |
          cmake --build build/ --config Release --target package
      - name: Verify CMake configuration files
        run: |
          cmake -S cmake/test -B cmake_config_build -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${VITASDK}/share/vita.toolchain.cmake \
            -DTEST_SHARED=FALSE \
            -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build cmake_config_build --verbose
      - name: Verify sdl3.pc
        run: |
          export CC=arm-vita-eabi-gcc
          export PKG_CONFIG_PATH=${{ env.SDL3_DIR }}/lib/pkgconfig
          cmake/test/test_pkgconfig.sh
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ matrix.platform.artifact }}
          path: build/dist/SDL3*

  freebsd:
    if: ${{ fromJSON(needs.controller.outputs.jobs).freebsd }}
    name: FreeBSD
    runs-on: macos-12
    needs: [controller]
    steps:
      - uses: actions/checkout@v3
      - name: Build
        uses: vmactions/freebsd-vm@v0
        with:
          mem: 8192
          usesh: true
          prepare: |
            pkg install -y \
                cmake \
                ninja \
                pkgconf \
                libXcursor \
                libXext \
                libXinerama \
                libXi \
                libXfixes \
                libXrandr \
                libXScrnSaver \
                libXxf86vm \
                wayland \
                wayland-protocols \
                libxkbcommon \
                mesa-libs \
                libglvnd \
                evdev-proto \
                libinotify \
                alsa-lib \
                jackit \
                pipewire \
                pulseaudio \
                sndio \
                dbus \
                zh-fcitx \
                ibus \
                libsamplerate \
                libudev-devd 

          run: |
            cmake -S . -B build -GNinja \
              -Wdeprecated -Wdev -Werror \
              -DCMAKE_BUILD_TYPE=Release \
              -DSDL_CHECK_REQUIRED_INCLUDES="/usr/local/include" \
              -DSDL_CHECK_REQUIRED_LINK_OPTIONS="-L/usr/local/lib"
            cmake --build build/ --config Release --verbose -- -j`sysctl -n hw.ncpu`
            cmake --build build/ --config Release --target package
            
            cmake --build build/ --config Release --target clean
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: SDL-freebsd
          path: build/dist/SDL3*
